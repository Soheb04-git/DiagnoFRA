// import jsPDF from "jspdf"
// import type { AnalysisResult } from "./mock-ai"

// interface ReportData {
//   fileName: string
//   uploadTime: Date
//   analysis: AnalysisResult
//   dataPoints: number
//   frequencyRange: {
//     min: number
//     max: number
//   }
// }

// export async function generatePDFReport(data: ReportData): Promise<void> {
//   const doc = new jsPDF()

//   // Header
//   doc.setFontSize(20)
//   doc.text("FRA Analysis Report", 20, 30)

//   doc.setFontSize(12)
//   doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 45)
//   doc.text(`File: ${data.fileName}`, 20, 55)

//   // Executive Summary
//   doc.setFontSize(16)
//   doc.text("Executive Summary", 20, 75)

//   doc.setFontSize(12)
//   doc.text(`Fault Type: ${data.analysis.faultType}`, 20, 90)
//   doc.text(`Confidence: ${(data.analysis.confidence * 100).toFixed(1)}%`, 20, 100)
//   doc.text(`Data Points: ${data.dataPoints}`, 20, 110)
//   doc.text(`Frequency Range: ${data.frequencyRange.min.toFixed(1)} - ${data.frequencyRange.max.toFixed(1)} Hz`, 20, 120)

//   // Analysis Details
//   doc.setFontSize(16)
//   doc.text("Analysis Details", 20, 140)

//   doc.setFontSize(12)
//   const explanation = doc.splitTextToSize(data.analysis.explanation, 170)
//   doc.text(explanation, 20, 155)

//   // Recommendations
//   doc.setFontSize(16)
//   doc.text("Recommendations", 20, 180)

//   doc.setFontSize(12)
//   const recommendation = doc.splitTextToSize(data.analysis.recommendation, 170)
//   doc.text(recommendation, 20, 195)

//   // Technical Data
//   doc.addPage()
//   doc.setFontSize(16)
//   doc.text("Technical Data", 20, 30)

//   doc.setFontSize(12)
//   doc.text(`Peak Frequency: ${data.analysis.features.peakFrequency.toFixed(2)} Hz`, 20, 50)
//   doc.text(`Magnitude Variation: ${data.analysis.features.magnitudeVariation.toFixed(2)} dB`, 20, 60)
//   doc.text(`Phase Shift: ${data.analysis.features.phaseShift.toFixed(2)}Â°`, 20, 70)
//   doc.text(`Resonance Count: ${data.analysis.features.resonanceCount}`, 20, 80)

//   // Chart placeholders
//   doc.setFontSize(14)
//   doc.text("Frequency Response Charts", 20, 110)
//   doc.setFontSize(10)
//   doc.text("(Charts would be embedded here in production version)", 20, 125)

//   // Footer
//   doc.setFontSize(8)
//   doc.text("Generated by FRA Dashboard - AI-Powered Transformer Diagnostics", 20, 280)

//   // Save the PDF
//   doc.save(`FRA_Report_${data.fileName}_${new Date().toISOString().split("T")[0]}.pdf`)
// }

import jsPDF from "jspdf"

interface ReportData {
  fileName: string
  uploadTime: Date
  analysis: {
    status: string
    score: number
    summary: string
  }
  dataPoints: number
  frequencyRange: {
    min: number
    max: number
  }
  template: "standard" | "executive" | "technical"
}

export async function generatePDFReport(data: ReportData): Promise<void> {
  const doc = new jsPDF()

  // ---------------------------
  // Common Header
  // ---------------------------
  doc.setFontSize(20)
  doc.text("FRA Analysis Report", 20, 30)

  doc.setFontSize(12)
  doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 45)
  doc.text(`File: ${data.fileName}`, 20, 55)
  doc.text(`Upload Time: ${data.uploadTime.toLocaleString()}`, 20, 65)

  // ---------------------------
  // Template-Specific Sections
  // ---------------------------
  if (data.template === "standard") {
    // Executive Summary
    doc.setFontSize(16)
    doc.text("Executive Summary", 20, 85)

    doc.setFontSize(12)
    doc.text(`Status: ${data.analysis.status}`, 20, 100)
    doc.text(`Health Score: ${data.analysis.score}%`, 20, 110)
    doc.text(`Data Points: ${data.dataPoints}`, 20, 120)
    doc.text(
      `Frequency Range: ${data.frequencyRange.min.toFixed(1)} - ${data.frequencyRange.max.toFixed(1)} Hz`,
      20,
      130
    )

    // Summary
    doc.setFontSize(16)
    doc.text("Analysis Summary", 20, 150)
    doc.setFontSize(12)
    const summary = doc.splitTextToSize(data.analysis.summary, 170)
    doc.text(summary, 20, 165)

    // Placeholder for charts
    doc.addPage()
    doc.setFontSize(16)
    doc.text("Technical Data & Charts", 20, 30)
    doc.setFontSize(12)
    doc.text("This section can include frequency response charts and deeper statistics.", 20, 50)
    doc.setFontSize(10)
    doc.text("(Charts embedding will be added in production)", 20, 65)
  }

  if (data.template === "executive") {
    doc.setFontSize(16)
    doc.text("Executive Summary", 20, 85)

    doc.setFontSize(12)
    doc.text(`Status: ${data.analysis.status}`, 20, 100)
    doc.text(`Health Score: ${data.analysis.score}%`, 20, 110)

    const summary = doc.splitTextToSize(data.analysis.summary, 170)
    doc.text(summary, 20, 125)
  }

  if (data.template === "technical") {
    doc.setFontSize(16)
    doc.text("Technical Deep Dive", 20, 85)

    doc.setFontSize(12)
    doc.text(`Status: ${data.analysis.status}`, 20, 100)
    doc.text(`Health Score: ${data.analysis.score}%`, 20, 110)
    doc.text(`Data Points: ${data.dataPoints}`, 20, 120)
    doc.text(
      `Frequency Range: ${data.frequencyRange.min.toFixed(1)} - ${data.frequencyRange.max.toFixed(1)} Hz`,
      20,
      130
    )

    const summary = doc.splitTextToSize("Detailed engineering notes:\n" + data.analysis.summary, 170)
    doc.text(summary, 20, 150)

    doc.addPage()
    doc.setFontSize(14)
    doc.text("Charts & Technical Appendix", 20, 30)
    doc.setFontSize(10)
    doc.text("(Charts would be inserted here in production)", 20, 45)
  }

  // ---------------------------
  // Footer
  // ---------------------------
  doc.setFontSize(8)
  doc.text("Generated by FRA Dashboard - AI-Powered Transformer Diagnostics", 20, 280)

  // Save file
  doc.save(`FRA_Report_${data.fileName}_${data.template}_${new Date().toISOString().split("T")[0]}.pdf`)
}
